

package service;

​

import model.User;

​

​

import java.util.*;

import java.util.concurrent.atomic.AtomicLong;

​

public class UserService{

​

    /* хранилище данных */

    //private Map<Long, User> dataBase = Collections.synchronizedMap(new HashMap<>());

    /* счетчик id */

   // private AtomicLong maxId = new AtomicLong(0);

    /* список авторизованных пользователей */

  // private Map<Long, User> authMap = Collections.synchronizedMap(new HashMap<>());

​

    /* хранилище данных */

    private Map<Long, User> dataBase;

    /* счетчик id */

    private AtomicLong maxId;

    /* список авторизованных пользователей */

    private Map<Long, User> authMap;

​

    private ArrayList<User> arrayList = new ArrayList<>();

​

    public UserService(){

        dataBase =  Collections.synchronizedMap(new HashMap<>());

        maxId = new AtomicLong(0);

        authMap = Collections.synchronizedMap(new HashMap<>());

    }

​

    public List<User> getAllUsers() {

​

        Collection<User> values1 = dataBase.values();

        ArrayList<User> userArrayList = new ArrayList<User>(values1);

        return userArrayList;

       // return (List<User>) dataBase.values();

        //arrayList values = (arrayList<User>) dataBase.values();

        //return values;

    }

​

    //public User getUserById(String id){

    public User getUserById(Long id) {

  // public User getUserById(String  id) {

        return  authMap.get(id);

    }

    public User getUserByLogin(String login) {

       // if (isExistsThisUser(login))

        return dataBase.get(login);

    }

   /*public boolean addUser(User user){

        dataBase.put(maxId.getAndIncrement(),user);

        if(isExistsThisUser(user) == true) return false;

        else return true;

   } */

​

    /* public void addUser(User user) {

     //   dataBase.put(maxId.get(),user);

         dataBase.put(maxId.getAndIncrement(),user);

    } */

​

    public boolean addUser(User user){

        if(isExistsThisUser(user) == true) return false;

        else {

           // dataBase.put(maxId.getAndIncrement(),user);

        //    maxId = dataBase.getKey();

            user.setId(maxId.getAndIncrement());

            dataBase.put(user.getId(),user);

            return true;

        }

    }

    public void deleteAllUser() {

          dataBase.clear();

    }

​

    public boolean isExistsThisUser(User user) {

​

        return dataBase.containsValue(user);

    }

​

    //public User getUserByEmail(String user) {

   //}

​

    // public boolean getAllAuth() {

    public List<User> getAllAuth() {

        //return  (List<User>) authMap.values();

        //return arrayList.add((User) authMap.values());

        Collection<User> auth = authMap.values();

        ArrayList<User> authList = new ArrayList<User>(auth);

        return authList;

    }

​

    public boolean authUser(User user) {

​

        return authMap.containsValue(user);

    }

​

    public void logoutAllUsers() {

​

        authMap.clear();

    }

​

    public boolean isUserAuthById(Long id) {

​

        return authMap.containsKey(id);

    }

    public User getUserByEmail(String email) {

​

        User user = null;

        Collection<User> values = dataBase.values();

        ArrayList<User> listOfValues = new ArrayList<User>(values);

        for (int i =0; i <listOfValues.size();i++){

            if(listOfValues.get(i).getEmail().equals(email)){

                user=listOfValues.get(i);

            }

            else user = null;

        }

        return user;

    }

   public void AddAuth(User user){

        //authMap.put(email,password);

       authMap.put(user.getId(),user);

   }

​

​

}

